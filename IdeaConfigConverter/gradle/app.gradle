type = '${type}'


//type = 'air'

adl{
    profile = 'extendedDesktop'
}
air {
    applicationDescriptor 'build/build.xml'
}

output = '${out.file}'

frameworkLinkage = '${frameworkLinkage}'

//configurations {
//	all*.exclude group: 'com.adobe.flex.framework'
//}

dependencies {
	/*dependencies.gradle*/
}

srcDirs = [ '${source.directories}' ]

mainClass = '${source.file.directory}${source.file.name}'

additionalCompilerOptions += [
		/*namespace_manifest*/
		/*namespace_include*/
		/*compiler_define*/
]

/*frameworkLinkage.air.enabler*/afterEvaluate {
/*frameworkLinkage.air.enabler*/	dependencies {
/*frameworkLinkage.air.enabler*/		external files("${flexHome}/frameworks/libs/air/airglobal.swc")
/*frameworkLinkage.air.enabler*/	}
/*frameworkLinkage.air.enabler*/}
/*frameworkLinkage.air.enabler*/ switch ("$platform") {
/*frameworkLinkage.air.enabler*/ case "io":
/*frameworkLinkage.air.enabler*/ 	if("$debug" == "true") {
/*frameworkLinkage.air.enabler*/ 		airMobile {
/*frameworkLinkage.air.enabler*/ 			platform = 'ios'
/*frameworkLinkage.air.enabler*/ 			outputExtension = 'ipa'
/*frameworkLinkage.air.enabler*/            //target = 'ipa-ad-hoc'
/*frameworkLinkage.air.enabler*/ 			target = 'ipa-app-store'
/*frameworkLinkage.air.enabler*/ 			provisioningProfile = '${source.io.debug.provision}'
/*frameworkLinkage.air.enabler*/            /*platform-sdk*/
/*frameworkLinkage.air.enabler*/ 		}
/*frameworkLinkage.air.enabler*/ 	} else {
/*frameworkLinkage.air.enabler*/ 		airMobile {
/*frameworkLinkage.air.enabler*/ 			platform = 'ios'
/*frameworkLinkage.air.enabler*/ 			outputExtension = 'ipa'
/*frameworkLinkage.air.enabler*/ 			target = 'ipa-app-store'
/*frameworkLinkage.air.enabler*/ 			provisioningProfile = '${source.io.provision}'
/*frameworkLinkage.air.enabler*/ 			/*platform-sdk*/
/*frameworkLinkage.air.enabler*/ 		}
/*frameworkLinkage.air.enabler*/ 	}
/*frameworkLinkage.air.enabler*/ 	break;
/*frameworkLinkage.air.enabler*/ case "an":
/*frameworkLinkage.air.enabler*/ case "am":
/*frameworkLinkage.air.enabler*/ 	airMobile {
/*frameworkLinkage.air.enabler*/ 		target = 'apk-captive-runtime'
/*frameworkLinkage.air.enabler*/ 	}
/*frameworkLinkage.air.enabler*/ 	break;
/*frameworkLinkage.air.enabler*/}
/*frameworkLinkage.air.enabler*/    // https://github.com/GradleFx/GradleFx/issues/191
/*frameworkLinkage.air.enabler*/    // http://stackoverflow.com/questions/2846828/converting-jks-to-p12
/*frameworkLinkage.air.enabler*/    // includeFileTrees = [fileTree(dir: 'src/main/actionscript/', include: 'assets/appIcon.png')]
/*frameworkLinkage.air.enabler*/    // packageCommand = "-storetype pkcs12 -keystore cert.p12 myApp.air #{applicationDescriptor} #{outputSwf} #{includeFileTrees}"
/*frameworkLinkage.air.enabler*/ def applicationDescriptorTemplate
/*frameworkLinkage.air.enabler*/ switch ("$platform") {
/*frameworkLinkage.air.enabler*/ case "io":
/*frameworkLinkage.air.enabler*/ 	if("$debug" == "true") {
/*frameworkLinkage.air.enabler*/ 		air {
/*frameworkLinkage.air.enabler*/ 			storepass '${storepass}'
/*frameworkLinkage.air.enabler*/			keystore '${source.io.debug.certificate}'
/*frameworkLinkage.air.enabler*/ 			applicationDescriptor 'build/build.xml'
/*frameworkLinkage.air.enabler*/ 			fileOptions = [ ${source.io.resources} ]
/*frameworkLinkage.air.enabler*/ 		}
/*frameworkLinkage.air.enabler*/ 	} else {
/*frameworkLinkage.air.enabler*/ 		air {
/*frameworkLinkage.air.enabler*/ 			storepass '${storepass}'
/*frameworkLinkage.air.enabler*/			keystore '${source.io.certificate}'
/*frameworkLinkage.air.enabler*/ 			applicationDescriptor 'build/build.xml'
/*frameworkLinkage.air.enabler*/ 			fileOptions = [ ${source.io.resources} ]
/*frameworkLinkage.air.enabler*/ 		}
/*frameworkLinkage.air.enabler*/ 	}
/*frameworkLinkage.air.enabler*/ 	applicationDescriptorTemplate = '${source.io.descriptor}'
/*frameworkLinkage.air.enabler*/ 	break;
/*frameworkLinkage.air.enabler*/ case "an":
/*frameworkLinkage.air.enabler*/ 	air {
/*frameworkLinkage.air.enabler*/ 		storepass '${storepass}'
/*frameworkLinkage.air.enabler*/ 		keystore '${source.an.certificate}'
/*frameworkLinkage.air.enabler*/ 		applicationDescriptor 'build/build.xml'
/*frameworkLinkage.air.enabler*/ 		fileOptions = [ ${source.an.resources} ]
/*frameworkLinkage.air.enabler*/ 	}
/*frameworkLinkage.air.enabler*/ 	applicationDescriptorTemplate = '${source.an.descriptor}'
/*frameworkLinkage.air.enabler*/ 	break;
/*frameworkLinkage.air.enabler*/ case "am":
/*frameworkLinkage.air.enabler*/ 	air {
/*frameworkLinkage.air.enabler*/ 		storepass '${storepass}'
/*frameworkLinkage.air.enabler*/ 		keystore '${source.am.certificate}'
/*frameworkLinkage.air.enabler*/ 		applicationDescriptor 'build/build.xml'
/*frameworkLinkage.air.enabler*/ 		fileOptions = [ ${source.am.resources} ]
/*frameworkLinkage.air.enabler*/ 	}
/*frameworkLinkage.air.enabler*/ 	applicationDescriptorTemplate = '${source.am.descriptor}'
/*frameworkLinkage.air.enabler*/ 	break;
/*frameworkLinkage.air.enabler*/ }
/*frameworkLinkage.air.enabler*/ packageMobile.doFirst {
/*frameworkLinkage.air.enabler*/ 	if("$debug" == "true") {
/*frameworkLinkage.air.enabler*/ 		copy {
/*frameworkLinkage.air.enabler*/ 			from applicationDescriptorTemplate
/*frameworkLinkage.air.enabler*/ 			into 'build'
/*frameworkLinkage.air.enabler*/ 			rename { String fileName -> fileName.replace(fileName, 'build.xml') }
/*frameworkLinkage.air.enabler*/ 			filter {
/*frameworkLinkage.air.enabler*/ 				String line -> line.replaceAll('SWF file name is set automatically at compile time', output + '.swf').replaceAll('<versionNumber>.*</versionNumber>', '<versionNumber>'+"$buildVersion"+'</versionNumber>').replaceAll('<versionLabel>.*</versionLabel>', '<versionLabel>'+"$buildVersion"+'</versionLabel>')
/*frameworkLinkage.air.enabler*/ 			}
/*frameworkLinkage.air.enabler*/ 		}
/*frameworkLinkage.air.enabler*/ 	} else {
/*frameworkLinkage.air.enabler*/ 		copy {
/*frameworkLinkage.air.enabler*/ 			from applicationDescriptorTemplate
/*frameworkLinkage.air.enabler*/ 			into 'build'
/*frameworkLinkage.air.enabler*/ 			rename { String fileName -> fileName.replace(fileName, 'build.xml') }
/*frameworkLinkage.air.enabler*/ 			filter {
/*frameworkLinkage.air.enabler*/ 				String line -> line.replaceAll('SWF file name is set automatically at compile time', output + '.swf').replaceAll('<versionNumber>.*</versionNumber>', '<versionNumber>'+"$buildVersion"+'</versionNumber>').replaceAll('<versionLabel>.*</versionLabel>', '<versionLabel>'+"$buildVersion"+'</versionLabel>').replaceAll('<!--<key>get-task-allow</key><false/>-->', '<key>get-task-allow</key><false/>').replaceAll('<!--<key>beta-reports-active</key><true/>-->', '<key>beta-reports-active</key><true/>')
/*frameworkLinkage.air.enabler*/ 			}
/*frameworkLinkage.air.enabler*/ 		}
/*frameworkLinkage.air.enabler*/ 	}
/*frameworkLinkage.air.enabler*/ }
/*frameworkLinkage.air.enabler*///task packageMobileLinux << {
/*frameworkLinkage.air.enabler*///	new File('${config.directory}/build/build.provision') << new File('${config.directory}/${source.provision}').bytes
/*frameworkLinkage.air.enabler*///	new File('${config.directory}/build/build.p12') << new File('${config.directory}/${source.certificate}').bytes
/*frameworkLinkage.air.enabler*///	new File('${config.directory}/build/build.xml') << new File('${config.directory}/${source.descriptor}').text.replaceAll('SWF file name is set automatically at compile time', '${out.file}.swf')
/*frameworkLinkage.air.enabler*///	def packer = new File('${config.directory}/build/build.sh')
/*frameworkLinkage.air.enabler*///	packer.delete()
/*frameworkLinkage.air.enabler*///	packer << '#!/bin/sh\n'
/*frameworkLinkage.air.enabler*///	packer << 'cd build\n'
/*frameworkLinkage.air.enabler*///	packer << 'wine java -jar '+flexHome+'/lib/adt.jar -package -target ipa-ad-hoc -provisioning-profile build.provision -storetype pkcs12 -keystore build.p12 -storepass Belka2010 ${out.file}.ipa build.xml ${out.file}.swf'
/*frameworkLinkage.air.enabler*///	packer.setExecutable(true)
/*frameworkLinkage.air.enabler*///	exec {
/*frameworkLinkage.air.enabler*///		executable 'build/build.sh'
/*frameworkLinkage.air.enabler*///	}
/*frameworkLinkage.air.enabler*///}
/*frameworkLinkage.air.enabler*///packageMobileLinux.dependsOn build


//<debug>${debug}</debug>
//					<optimize>${optimize}</optimize>

launchAdl.doFirst {
    copy {
        from 'build/build.xml'
        into 'build'
        rename { String fileName -> fileName.replace(fileName, 'build.xml.tmp') }
        filter {
            String line -> line.replaceAll('xmlns="http://ns.adobe.com/air/application/.*"', "xmlns=\"http://ns.adobe.com/air/application/${air.sdk.version}\"").replaceAll('<versionNumber>.*</versionNumber>', '<versionNumber>'+"$buildVersion"+'</versionNumber>').replaceAll('<versionLabel>.*</versionLabel>', '<versionLabel>'+"$buildVersion"+'</versionLabel>')
        }
    }
    copy {
        from 'build/build.xml.tmp'
        into 'build'
        rename { String fileName -> fileName.replace(fileName, 'build.xml') }
    }
}